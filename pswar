#!/usr/bin/php

# Created by achaaoui with <3
# Usage: see  "screenshots/usage.png" or run "./pswar"

<?php
echo `clear`;
$BLK = "\e[0;30m";
$RED = "\e[0;31m";
$GRN = "\e[0;32m";
$YEL = "\e[0;33m";
$BLU = "\e[0;34m";
$MAG = "\e[0;35m";
$CYN = "\e[0;36m";
$WHT = "\e[0;37m";

//Regular bold text
$BBLK = "\e[1;30m";
$BRED = "\e[1;31m";
$BGRN = "\e[1;32m";
$BYEL = "\e[1;33m";
$BBLU = "\e[1;34m";
$BMAG = "\e[1;35m";
$BCYN = "\e[1;36m";
$BWHT = "\e[1;37m";

//Regular underline text
$UBLK = "\e[4;30m";
$URED = "\e[4;31m";
$UGRN = "\e[4;32m";
$UYEL = "\e[4;33m";
$UBLU = "\e[4;34m";
$UMAG = "\e[4;35m";
$UCYN = "\e[4;36m";
$UWHT = "\e[4;37m";

//Regular background
$BLKB = "\e[40m";
$REDB = "\e[41m";
$GRNB = "\e[42m";
$YELB = "\e[43m";
$BLUB = "\e[44m";
$MAGB = "\e[45m";
$CYNB = "\e[46m";
$WHTB = "\e[47m";

//High intensty background 
$BLKHB = "\e[0;100m";
$REDHB = "\e[0;101m";
$GRNHB = "\e[0;102m";
$YELHB = "\e[0;103m";
$BLUHB = "\e[0;104m";
$MAGHB = "\e[0;105m";
$CYNHB = "\e[0;106m";
$WHTHB = "\e[0;107m";

//High intensty text
$HBLK = "\e[0;90m";
$HRED = "\e[0;91m";
$HGRN = "\e[0;92m";
$HYEL = "\e[0;93m";
$HBLU = "\e[0;94m";
$HMAG = "\e[0;95m";
$HCYN = "\e[0;96m";
$HWHT = "\e[0;97m";

//Bold high intensity text
$BHBLK = "\e[1;90m";
$BHRED = "\e[1;91m";
$BHGRN = "\e[1;92m";
$BHYEL = "\e[1;93m";
$BHBLU = "\e[1;94m";
$BHMAG = "\e[1;95m";
$BHCYN = "\e[1;96m";
$BHWHT = "\e[1;97m";

//Reset
$RESET = "\e[0m";

$HEADER =
"$CYN
	▄█─ █▀▀█ █▀▀█ ▀▀▀█ 
	─█─ ──▀▄ ──▀▄ ──█─ 
	▄█▄ █▄▄█ █▄▄█ ─▐▌─
$RESET
";
function print_usage()
{
	global $HEADER, $RESET, $BLK, $GRNB, $BCYN;
	$USAGE =
	"${BLK}${GRNB} USAGE ${RESET}\n
./pswar ${BCYN}[push_swap_bin] [size 0R range] [tests_count]\n${RESET}
${BLK}${GRNB} EXAMPLES ${RESET}\n
./pswar ${BCYN}../push_swap 100-500 10\n${RESET}
./pswar ${BCYN}./a.out 100 20\n${RESET}
./pswar ${BCYN} /home/achaaoui/bin 500 5\n${RESET}
";
	echo $HEADER . $USAGE;
	exit;
}
function error($error)
{
	if (!$error)
		$error = "double check ur arguments";
	global $WHT, $RESET, $REDB;
	echo "\n${WHT}${REDB} ERROR: $RESET $error\n\n";
	exit;
}

$USED_NUMBERS = [];
function random_string_n()
{
	global $USED_NUMBERS;
	$number = random_int(1, 9999999);
	while(in_array($number, $USED_NUMBERS))
	{
		$number = random_int(1, 9999999);
	}
	$USED_NUMBERS[] = $number;
	return $number;
}
function generate_random_string($number)
{
	global $USED_NUMBERS;
	$string = "";
	for ($i = 0; $i < $number; $i++) { 
		$string .= " " . random_string_n();
	}
	$USED_NUMBERS = [];
	return $string;
}

function generate_random_string_between($min, $max)
{
	return  generate_random_string(random_int($min, $max));
}
$NUMBERS = [];
function generate($number, $min, $max)
{
	global $NUMBERS;
	$numbers_file = fopen("logs", "w") or die("Unable to open file!");
	for ($i = 1; $i <= $number; $i++) { 
		if (!$max)
		{
			$numbers_set = trim(generate_random_string($min));
			fwrite($numbers_file, "TEST ($i)\n" . $numbers_set . "\n");
			$NUMBERS[] = $numbers_set;
		}
		else
		{
			$numbers_set = trim(generate_random_string_between($min, $max));
			fwrite($numbers_file, "TEST ($i)\n" . $numbers_set . "\n");
			$NUMBERS[] = $numbers_set;
		}
	}
	fclose($numbers_file);
}

function generate_numbers($range, $count)
{
	if (!is_numeric($count) || (int) $count <= 0)
		error("the count cant be less than 1 or not numeric [$count]");
	if (strpos($range, '-') != false)
	{
		$arr = explode('-', $range);
		if (count($arr) != 2 || !is_numeric($arr[0]) || !is_numeric($arr[1]))
			error(null);
		generate($count, $arr[0], $arr[1]);
	}
	else
	{
		if (!is_numeric($range) || (int) $range <= 0)
			error("the count cant be less than 1 or not numeric [$count]");
		generate($count, (int) $range, null);
	}
}
function print_check_mark($stack_size, $inst_count)
{
	global $BLK, $MAGB, $YELB, $RESET;
	$ko = "${BLK}${MAGB} ✗ ${RESET}";
	$ok = "${BLK}${YELB} ✓ ${RESET}";
	if ($stack_size > 500)
	{
		echo  "${BLK}${YELB}+500${RESET}";;
		return ;
	}
	if (($stack_size <= 100 && $inst_count < 700) || ($stack_size > 100 && $inst_count < 5500))
		echo $ok;
	else
		echo $ko;
}

if ($argc != 4)
	print_usage();
$EXCUTABEL	= $_SERVER["argv"][1];
$RANGE		= $_SERVER["argv"][2];
$COUNT		= $_SERVER["argv"][3];
if (!is_executable($EXCUTABEL))
	error("double check the excutable path (did u make?)");
echo 
"
${MAG}RUNNING: args: ${RESET}${WHT}${RANGE} ${COUNT}${RESET}
${MAG}Testing push_swap with ${RESET}${WHT}${RANGE} ${COUNT}${RESET} ${MAG}tests${RESET}

 ${CYN}Generating random numbers\n ${RESET}
";
generate_numbers($RANGE, $COUNT);
echo "${HBLK}  TEST                    RESULT     FULL MARK            INSTRUCTIONS${RESET}\n\n";
$i = 1;
foreach ($NUMBERS as $number) {
	echo "${BHBLK}TEST ($i) :${RESET}                 ";
	$instractions = [];
	exec($EXCUTABEL . " ".  $number . " 2> /dev/null", $instractions);
	$count = count($instractions);
	$result = exec('printf "' . implode("\n", $instractions) . '\n"' . " | ./checker " .  $number);

	if ($result == "OK")
		echo "${BLK}${GRNB} OK ${RESET}";
	else
		echo "${BLK}${REDB} KO ${RESET}";
	echo "         ";
	print_check_mark(count(explode(" ", $number)), $count);
	echo "                 ";
	echo "${BLK}${CYNB} ${count} ${RESET}";
	echo "\n\n";
	$i++;
}